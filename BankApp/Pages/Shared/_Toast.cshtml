@{
    var msg  = TempData["ToastMessage"]?.ToString();
    var type = (TempData["ToastType"] ?? "success").ToString();
}

@if (!string.IsNullOrWhiteSpace(msg))
{
    <section id="toast"
         class="toast toast-@type"
         role="alert" aria-live="assertive" aria-atomic="true">
        <span class="toast-body">@msg</span>
        <button type="button" class="toast-close" aria-label="Close">&times;</button>
    </section>

    <script>
        (() => {
            const toast = document.getElementById('toast');
            const closeBtn = toast.querySelector('.toast-close');

            const hide = () => toast.classList.add('toast-hide');
            
            setTimeout(hide, 4000);
            
            closeBtn.addEventListener('click', hide);
            
            toast.addEventListener('transitionend', () => toast.remove());
        })();
    </script>

    <style>
        .toast{
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            z-index: 5000;
            display: flex;
            align-items: center;
            gap: .5rem;
            padding: .75rem 1rem;
            border-radius: .5rem;
            font-size: .875rem;
            color: #fff;
            box-shadow: 0 4px 12px rgba(0,0,0,.15);
        }
        .toast-hide {
            opacity: 0;
            transform: translateY(200vh);
        }
        
        .toast-success { background:#28a745; }
        /*.toast-error   { background:#dc3545; }*/
        /*.toast-info    { background:#0d6efd; }*/

        /* ——— close button ——— */
        .toast-close{
            background: none;
            border: none;
            font-size: 1rem;
            line-height: 1;
            color: inherit;
            cursor: pointer;
        }
    </style>
}