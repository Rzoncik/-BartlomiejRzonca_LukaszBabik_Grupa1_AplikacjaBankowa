@page
@model TransfersHistoryModel
@{
    ViewData["Title"] = "Historia operacji";
    Layout = "~/Pages/Shared/_DashboardLayout.cshtml";
}

<h1 class="title">Historia operacji</h1>

<section class="form dashboard-form filters">
    
    @* Przycisk pokazujący i ukrywający panel filtrów *@
    <a href="#" id="toggleFilters" class="filter-panel">Filtry</a>

    @* Panel filtrów *@
    <section id="filterPanel">
        <br/>
        <br/>
        <form id="filterForm" autocomplete="off">
            <label for="fromDate">Od daty</label>
            <input type="text" id="fromDate">
            <label for="toDate">Do daty</label>
            <input type="text" id="toDate">
            <label for="minAmount">Kwota od</label>
            <input id="minAmount" type="text" pattern="[0-9]+([\.,][0-9]{1,2})?">
            <label for="maxAmount">Kwota do</label>
            <input id="maxAmount" type="text" pattern="[0-9]+([\.,][0-9]{1,2})?">
            <label>Typ operacji</label>
            <br/>
            <select id="flowType" class="select">
                <option value="" selected>Wszystkie</option>
                <option value="in">Wpływy</option>
                <option value="out">Wydatki</option>
            </select>
            <br/>
            <label for="searchText">Szukaj</label>
            <input id="searchText" type="text">
            <input id="applyFilter" type="submit" value="Filtruj"/>
        </form>
    </section>
</section>

<table class="dashboard-form table-transfers">
    <thead>
    <tr>
        <th>Data</th>
        <th>Kwota</th>
        <th>Tytuł</th>
        <th>Odbiorca</th>
        <th>Nadawca</th>
        <th>IBAN nadawcy</th>
        <th>IBAN odbiorcy</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var t in Model.Transfers)
    {
        bool isOutgoing = t.SenderUserId == Model.CurrentUserId;
        string rowColor = isOutgoing ? "red" : "green";
        decimal signedAmount = isOutgoing ? -t.Amount : t.Amount;
        string typeStr = isOutgoing ? "out" : "in";
        <tr class="@rowColor"
            data-date="@t.ExecutedAtUtc.ToLocalTime().ToString("yyyy-MM-dd")"
            data-type="@typeStr"
            data-title="@t.Title!.ToLower()"
            data-amount="@(Math.Abs(signedAmount).ToString(System.Globalization.CultureInfo.InvariantCulture))">
            <td>@t.ExecutedAtUtc.ToLocalTime().ToString("dd-MM-yyyy")</td>
            <td>
                @(signedAmount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pl-PL")))
            </td>
            <td>@t.Title</td>
            <td>@t.ReceiversName</td>
            <td>@($"{t.Sender?.FirstName} {t.Sender?.LastName}")</td>
            <td>@t.SenderIban</td>
            <td>@t.ReceiverIban</td>
        </tr>
    }
    </tbody>
</table>
<br/>
<br/>
<br/>
<br/>
<br/>

@section Scripts {
    <script>
        (() => {
            'use strict';
            
            const parseAmount = raw => {
                const v = raw.trim().replace(',', '.');
                const n = v ? parseFloat(v) : NaN;
                return isNaN(n) ? null : n;
            };
            
            const filterPanel  = document.getElementById('filterPanel');
            document.getElementById('toggleFilters')
                    .addEventListener('click', () => {
                        filterPanel.classList.toggle('open');
                    });
            
            document.getElementById('filterForm').addEventListener('submit', e => {
                e.preventDefault();

                        const fromDate = document.getElementById('fromDate').value;
                        const toDate   = document.getElementById('toDate').value;
                        const flow     = document.getElementById('flowType').value;
                        const query    = document.getElementById('searchText').value.trim().toLowerCase();
                        const minAmount = parseAmount(document.getElementById('minAmount').value);
                        const maxAmount = parseAmount(document.getElementById('maxAmount').value);

                        document.querySelectorAll('tbody tr').forEach(row => {
                            const date   = row.dataset.date;
                            const type   = row.dataset.type;
                            const title  = row.dataset.title;
                            const amount = parseFloat(row.dataset.amount);

                            const dateOK = (!fromDate || date >= fromDate) && (!toDate || date <= toDate);
                            const typeOK = !flow || type === flow;
                            const textOK = !query || title.includes(query);
                            const amtOK  = (!minAmount || amount >= minAmount) && (!maxAmount || amount <= maxAmount);

                            row.style.display = (dateOK && typeOK && textOK && amtOK) ? '' : 'none';
                        });
                    });
        })();
    </script>
}